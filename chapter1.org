* 第1章 オブジェクトモデル

** チェックリスト
オブジェクトは複数のインスタンス変数とクラスへのリンクで構成されている
クラスはClassクラスのオブジェクト。クラス名は単なる定数。
ClassはModuleのサブクラス。モジュールはメソッドを集めたもの。
クラスはそれぞれBasicObjectまで続く継承チェーンを持っている
メソッド呼び出しのとき Rubyはレシーバのクラスに「一歩右に進む」、それから継承チェーンを「上へ向かってすすむ」。メソッドを発見するか、継承チェーンが終わるまで続く。
クラスがモジュールをインクルードすると、そのクラスの真上の継承チェーンにモジュールが挿入される。
メソッドを呼び出すとき、レシーバが self になる。
モジュールを定義すると、モジュールが self になる。
インスタンス変数は、selfのインスタンス変数。
レシーバを明示せずメソッド呼び出しすると、selfのメソッドとして処理される。

** 1.2 オープンクラス
    Stringクラスを呼びだすだけで、メソッドが追加できる。
        Rubyのclassキーワードは、クラス宣言というよりもスコープ演算子のようなもの。
    このように既存のクラスを再オープンして、修正できる。標準クラスでさえも。
    この技術がオープンクラス。

    問題点
        すでにあるメソッド名を追加すると、メソッドが反映されず、エラーになる。
        このような安易なパッチを、モンキーパッチとよぶ。

** 1.3 クラスの真実
*** オブジェクトに含まれるインスタンス変数を表示。
        Object#instance_variables
        Object#methods

*** インスタンスメソッドとメソッドの違い
        インスタンスメソッドはクラスに注目、メソッドはオブジェクトに注目
        String.instance_methods == "ac".methods
        String.methods /= "ac".methods

    ####クラスはオブジェクト。Classクラスのインスタンスに、インスタンスメソッド一覧とスーパークラスのリンクがついたもの。####
    ####Classクラスは Moduleクラスのサブクラス###
    ####オブジェクトはインスタンス変数の集まりに、クラスへのリンクがついたもの###


*** クラスとモジュールの使いわけ
        モジュールはインスタンスメソッドの集まり。
        クラスはモジュールに superclass や new などのメソッドを追加しただけ。

        ほとんどの場合、どちらを使っても問題ないが、用途を分けておけばコードが分かりやすくなる。
        モジュールはインクルードされるもの、
        クラスはインスタンス生成、継承をするときに使う。

        モジュールの現在のパスを表示したければ
            Module.nesting()

** 1.5 メソッドを呼び出すときに何が起きているの?

*** メソッドを呼び出すとき、2つのことを行う
        1.メソッドを呼び出す。(メソッド探索)
        2.メソッドを実行する。(self をつかう)
*** メソッドを呼び出す
    モジュールをクラスにインクルードするとき、無名クラスを使ってモジュールをラップし、継承チェーンに挿入。
        module M
          def my_method
            "M#my_method"
          end
        end

        class C
          include M
        end

        class D < C; end
        D.new.my_method ## => "M#my_method"
    これをインクルードクラス(プロキシクラス)と呼ぶ




**** Kernel
rubyには、どこからでも呼び出せるメソッドがある。
これはObjectクラスが Kernelモジュールをインクルードしているから。
すべてのオブジェクトの継承チェーンにKernelモジュールが入っている。
だから、Kernelにメソッドを追加すれば、すべてのオブジェクトでつかえる。

たとえば rubygems.rbには
module Kernel
  def gem(gem_name, *version_requirements)
  ///
とできる。

**** selfの発見
Rubyのコードはカレントオブジェクト (self) の中で実行される。
メソッドを呼び出すときは、レシーバがselfになる。
レシーバとは、呼び出すメソッドが属するオブジェクトのこと。
その時点で、すべてのインスタンス変数はselfのインスタンス変数になる。
また、レシーバを明示せずにメソッドを呼び出すと、selfに対するメソッド呼び出しになる。(つまり呼び出し元のオブジェクトから)

**** privateとは
プライベートメソッドは、暗黙的なレシーバselfに対するメソッドでなければならない。
つまり同一クラス内で、
self.private_method
は動かないが、
private_method
なら動く。

